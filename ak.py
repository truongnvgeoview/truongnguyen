import streamlit as st
import pandas as pd
import os
from datetime import datetime

# ==== ƒê∆Ø·ªúNG D·∫™N FILE ====
INVENTORY_FILE = 'data/inventory.csv'
BANHANG_FILE = 'data/banhang.csv'

# ==== T·∫†O TH∆Ø M·ª§C ====
os.makedirs("data", exist_ok=True)

# ==== LOAD D·ªÆ LI·ªÜU ====
def load_inventory():
    if os.path.exists(INVENTORY_FILE):
        return pd.read_csv(INVENTORY_FILE)
    return pd.DataFrame(columns=['Model', 'IMEI', 'Gi√° Nh·∫≠p', 'T√¨nh Tr·∫°ng'])

def load_sales():
    if os.path.exists(BANHANG_FILE):
        try:
            return pd.read_csv(BANHANG_FILE)
        except pd.errors.EmptyDataError:
            return pd.DataFrame(columns=['Model', 'IMEI', 'Gi√° Nh·∫≠p', 'T√¨nh Tr·∫°ng', 'Ng√†y B√°n'])
    else:
        return pd.DataFrame(columns=['Model', 'IMEI', 'Gi√° Nh·∫≠p', 'T√¨nh Tr·∫°ng', 'Ng√†y B√°n'])

def save_inventory(df):
    df.to_csv(INVENTORY_FILE, index=False)

def save_sales(df):
    df.to_csv(BANHANG_FILE, index=False)

# ==== GIAO DI·ªÜN ====
st.set_page_config(page_title="üì± QU·ªêC H√ôNG Mobile - PH·∫¶N M·ªÄM QU·∫¢N L√ù", layout="wide")
st.title(" QU·ªêC H√ôNG  Mobile - Ph·∫ßn M·ªÅm Qu·∫£n L√Ω Kho")

inventory = load_inventory()
sales = load_sales()

col1, col2 = st.columns([1, 2])

# ==== NH·∫¨P M√ÅY ====
with col1:
    with st.form("form_nhap"):
        st.subheader("‚ûï Nh·∫≠p m√°y m·ªõi")

        model_base_option = st.selectbox("üì± D√≤ng m√°y", [
            "iPhone 12", "iPhone 13", "iPhone 14", "iPhone 15", "iPhone 16", "Samsung", "Kh√°c"
        ])

        if model_base_option == "Kh√°c":
            model_base = st.text_input("Nh·∫≠p d√≤ng m√°y kh√°c").strip()
        else:
            model_base = model_base_option

        model_type = st.selectbox("üìå Ki·ªÉu m√°y", ["Th∆∞·ªùng", "Pro", "Pro Max"])
        storage_choice = st.selectbox("üíæ Dung l∆∞·ª£ng", ["128GB", "256GB", "512GB", "Kh√°c"])

        if storage_choice == "Kh√°c":
            storage_custom = st.text_input("Nh·∫≠p dung l∆∞·ª£ng kh√°c (v√≠ d·ª•: 1TB)").strip()
            model_storage = storage_custom
        else:
            model_storage = storage_choice

        imei = st.text_input("üî¢ IMEI", max_chars=30).strip()
        gia_nhap = st.number_input("üí∞ Gi√° Nh·∫≠p (ngh√¨n KRW)", min_value=1)
        tinh_trang = st.text_input("‚öôÔ∏è T√¨nh Tr·∫°ng (pin, m√†n, Face ID...)", max_chars=100).strip()

        submit = st.form_submit_button("‚úÖ Th√™m v√†o kho")

        if submit:
            full_model = f"{model_base} {model_type} {model_storage}"
            full_price = gia_nhap * 1000

            if not model_base or not model_storage or not imei or not tinh_trang:
                st.error("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng.")
            elif len(imei) < 5:
                st.error("‚ùå IMEI ph·∫£i d√†i √≠t nh·∫•t 5 k√Ω t·ª±.")
            elif imei in inventory['IMEI'].astype(str).values:
                st.warning("‚ö†Ô∏è IMEI n√†y ƒë√£ t·ªìn t·∫°i trong kho!")
            else:
                new_row = pd.DataFrame([[full_model, imei, full_price, tinh_trang]], columns=inventory.columns)
                inventory = pd.concat([inventory, new_row], ignore_index=True)
                save_inventory(inventory)
                st.success("‚úîÔ∏è M√°y m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho!")

# ==== DANH S√ÅCH M√ÅY HI·ªÜN C√ì ====
with col2:
    st.subheader("üì¶ Danh s√°ch m√°y hi·ªán c√≥")

    search = st.text_input("üîç T√¨m ki·∫øm theo Model ho·∫∑c IMEI").lower().strip()
    if search:
        filtered = inventory[
            inventory['Model'].str.lower().str.contains(search) |
            inventory['IMEI'].astype(str).str.lower().str.contains(search)
        ]
    else:
        filtered = inventory

    if not filtered.empty:
        header = st.columns([3, 2, 2, 3, 1, 1])
        header[0].markdown("**üì± Model**")
        header[1].markdown("**üî¢ IMEI**")
        header[2].markdown("**üí∞ Gi√° Nh·∫≠p**")
        header[3].markdown("**‚öôÔ∏è T√¨nh Tr·∫°ng**")
        header[4].markdown("**üì§ B√°n**")
        header[5].markdown("**üóëÔ∏è Xo√°**")

    for i, row in filtered.iterrows():
        cols = st.columns([3, 2, 2, 3, 1, 1])
        cols[0].markdown(f"{row['Model']}")
        cols[1].markdown(f"`{row['IMEI']}`")
        cols[2].markdown(f"{int(row['Gi√° Nh·∫≠p']):,}‚Ç©")
        cols[3].markdown(f"{row['T√¨nh Tr·∫°ng']}")

        # üì§ B√ÅN
        if cols[4].button("üì§", key=f"ban_{i}"):
            ngay_ban = datetime.now().strftime("%Y-%m-%d")
            sold_row = pd.DataFrame([[row['Model'], row['IMEI'], row['Gi√° Nh·∫≠p'], row['T√¨nh Tr·∫°ng'], ngay_ban]],
                                    columns=['Model', 'IMEI', 'Gi√° Nh·∫≠p', 'T√¨nh Tr·∫°ng', 'Ng√†y B√°n'])
            sales = pd.concat([sales, sold_row], ignore_index=True)
            save_sales(sales)

            inventory.drop(index=i, inplace=True)
            inventory.reset_index(drop=True, inplace=True)
            save_inventory(inventory)
            st.success(f"‚úÖ ƒê√£ b√°n m√°y: {row['Model']} ({row['IMEI']})")
            st.experimental_rerun()

        # üóëÔ∏è XO√Å
        if cols[5].button("üóëÔ∏è", key=f"xoa_{i}"):
            inventory.drop(index=i, inplace=True)
            inventory.reset_index(drop=True, inplace=True)
            save_inventory(inventory)
            st.warning(f"üóëÔ∏è ƒê√£ xo√° m√°y: {row['Model']} ({row['IMEI']})")
            st.experimental_rerun()

# ==== M√ÅY ƒê√É B√ÅN ====
with st.expander("üìã Xem danh s√°ch m√°y ƒë√£ b√°n"):
    if sales.empty:
        st.info("Ch∆∞a c√≥ m√°y n√†o ƒë∆∞·ª£c b√°n.")
    else:
        display_sales = sales.copy()
        display_sales['Gi√° Nh·∫≠p'] = display_sales['Gi√° Nh·∫≠p'].apply(lambda x: f"{int(x):,}‚Ç©")
        st.dataframe(display_sales, use_container_width=True)
